generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id_usuario  Int    @id @default(autoincrement())
  nombre      String
  ap_paterno  String
  ap_materno  String
  correo      String @unique
  contrasenia String
  rol         String

  tareas Tareas[] // Un usuario puede tener muchas tareas
}

model Tareas {
  id_tarea      Int      @id @default(autoincrement())
  Titulo        String
  descripcion   String
  Evidencia     String
  estado        String
  Hora_creacion DateTime @default(now())
  Hora_termina  DateTime

  id_usuario Int
  tarea      String
  fecha      DateTime

  usuario Usuario @relation(fields: [id_usuario], references: [id_usuario])

  solxprus SolxPru[] // Una tarea puede tener muchos SolxPru
}

model SolxPru {
  id_solxpru  Int @id @default(autoincrement())
  id_solucion Int
  id_prueba   Int
  id_tarea    Int

  solucion Solucion? @relation(fields: [id_solucion], references: [id_solucion]) // Relaci贸n opcional
  prueba   Prueba?   @relation(fields: [id_prueba], references: [id_prueba]) // Relaci贸n opcional
  tarea    Tareas    @relation(fields: [id_tarea], references: [id_tarea]) // Relaci贸n obligatoria
}

model Solucion {
  id_solucion   Int      @id @default(autoincrement())
  descripcion   String
  Hora_creacion DateTime @default(now())
  Hora_atencion DateTime
  Hora_termina  DateTime

  tareas SolxPru[] // Una soluci贸n puede estar en muchas tareas SolxPru
}

model Prueba {
  id_prueba     Int      @id @default(autoincrement())
  descripcion   String
  Hora_creacion DateTime @default(now())
  Hora_atencion DateTime
  Hora_termina  DateTime

  tareas SolxPru[] // Una prueba puede estar en muchas tareas SolxPru
}
